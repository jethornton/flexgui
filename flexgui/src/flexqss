#!/usr/bin/env python3

import sys, os, textwrap
# disable cache usage must be before any local imports
sys.dont_write_bytecode = True

from functools import partial

from PyQt6.QtWidgets import QApplication, QMainWindow, QColorDialog
from PyQt6.QtWidgets import QRadioButton, QFontDialog, QFileDialog
from PyQt6.QtGui import QPixmap, QFont, QFontInfo, QColor
from PyQt6.QtCore import QSignalBlocker
from PyQt6 import uic

from libflexgui import qss_images
from libflexgui import qss_pushbutton
from libflexgui import qss_checkbox
from libflexgui import qss_radiobutton
from libflexgui import qss_toolbar
from libflexgui import qss_toolbutton

class main(QMainWindow):
	def __init__(self):
		super().__init__()

		# get the path to the executable
		self.path = os.path.dirname(os.path.realpath(sys.argv[0]))

		# set the library path
		if self.path == '/usr/bin':
			self.gui_path = '/usr/lib/libflexgui'
		else:
			self.gui_path = self.path
		uic.loadUi(os.path.join(self.gui_path, 'flexqss.ui'), self)

		self.setGeometry(0, 0, 500, 500)
		self.setWindowTitle('Flex QSS Creator')
		qss_pushbutton.startup(self)
		qss_checkbox.startup(self)
		qss_radiobutton.startup(self)
		qss_toolbar.startup(self)
		qss_toolbutton.startup(self)
		self.setup()
		self.show()

	def setup(self):

		for i in range(6):
			getattr(self, f'boxmodel_lb_{i}').setPixmap(QPixmap(':/boxmodel.png'))
		#self.boxmodel_lb.setPixmap(QPixmap(':/boxmodel.png'))

		# Menu Items
		self.actionSave_As.triggered.connect(self.save)

		border_types = ['none', 'solid', 'dashed', 'dotted', 'double', 'groove',
			'ridge', 'inset', 'outset']
		abstract_button_states = ['normal', 'hover', 'pressed', 'checked', 'disabled']

		# QLabel
		self.lb_apply_style.clicked.connect(self.lb_create_stylesheet)
		self.lb_disable.clicked.connect(partial(self.disable, 'label'))

		lb_pseudo_states = ['normal', 'hover', 'disabled']

		for state in lb_pseudo_states: # color dialog connections
			getattr(self, f'lb_fg_color_{state}').clicked.connect(self.color_dialog)
			getattr(self, f'lb_bg_color_{state}').clicked.connect(self.color_dialog)
			getattr(self, f'lb_border_color_{state}').clicked.connect(self.color_dialog)

		for item in lb_pseudo_states: # populate border combo boxes
			getattr(self, f'lb_border_type_{item}').addItems(border_types)

		# setup enable variables
		for item in lb_pseudo_states:
			setattr(self, f'lb_{item}', False)
			setattr(self, f'lb_color_{item}', False)
			setattr(self, f'lb_bg_color_{item}', False)
			setattr(self, f'lb_border_color_{item}', False)

		self.lb_font_family = False
		self.lb_font_size = False
		self.lb_font_weight = False
		self.lb_font_style = False
		self.lb_font_italic = False

		self.lb_min_width_normal.valueChanged.connect(self.size)
		self.lb_min_height_normal.valueChanged.connect(self.size)
		self.lb_max_width_normal.valueChanged.connect(self.size)
		self.lb_max_height_normal.valueChanged.connect(self.size)

		self.lb_padding_normal.valueChanged.connect(self.padding)
		self.lb_padding_left_normal.valueChanged.connect(self.padding)
		self.lb_padding_right_normal.valueChanged.connect(self.padding)
		self.lb_padding_top_normal.valueChanged.connect(self.padding)
		self.lb_padding_bottom_normal.valueChanged.connect(self.padding)

		self.lb_margin_normal.valueChanged.connect(self.margin)
		self.lb_margin_left_normal.valueChanged.connect(self.margin)
		self.lb_margin_right_normal.valueChanged.connect(self.margin)
		self.lb_margin_top_normal.valueChanged.connect(self.margin)
		self.lb_margin_bottom_normal.valueChanged.connect(self.margin)

		self.lb_font_picker.clicked.connect(self.font_dialog)

	######### QLabel Stylesheet #########

	def lb_create_stylesheet(self):
		style = False

		# QLabel normal pseudo-state
		if self.lb_normal:
			style = 'QLabel {'

			# color
			if self.lb_color_normal:
				style += f'\n\tcolor: {self.lb_color_normal};'
			if self.lb_bg_color_normal:
				style += f'\n\tbackground-color: {self.lb_bg_color_normal};'

			# font
			if self.lb_font_family:
				style += f'\n\tfont-family: {self.lb_font_family};'
			if self.lb_font_size:
				style += f'\n\tfont-size: {self.lb_font_size}pt;'
			if self.lb_font_weight:
				style += f'\n\tfont-weight: {self.lb_font_weight};'


			# size
			if self.lb_min_width_normal.value() > 0:
				style += f'\n\tmin-width: {self.lb_min_width_normal.value()};'
			if self.lb_min_height_normal.value() > 0:
				style += f'\n\tmin-height: {self.lb_min_height_normal.value()};'
			if self.lb_max_width_normal.value() > 0:
				style += f'\n\tmax-width: {self.lb_max_width_normal.value()};'
			if self.lb_max_height_normal.value() > 0:
				style += f'\n\tmax-height: {self.lb_max_height_normal.value()};'

			# border
			border_type_normal = self.lb_border_type_normal.currentText()
			if border_type_normal != 'none':
				style += f'\n\tborder-style: {border_type_normal};'
			if self.lb_border_color_normal:
				style += f'\n\tborder-color: {self.lb_border_color_normal};'
			if self.lb_border_width_normal.value() > 0:
				style += f'\n\tborder-width: {self.lb_border_width_normal.value()}px;'
			if self.lb_border_radius_normal.value() > 0:
				style += f'\n\tborder-radius: {self.lb_border_radius_normal.value()}px;'

			# padding
			if self.lb_padding_normal.value() > 0:
				style += f'\n\tpadding: {self.lb_padding_normal.value()};'
			if self.lb_padding_left_normal.value() > 0:
				style += f'\n\tpadding-left: {self.lb_padding_left_normal.value()};'
			if self.lb_padding_right_normal.value() > 0:
				style += f'\n\tpadding-right: {self.lb_padding_right_normal.value()};'
			if self.lb_padding_top_normal.value() > 0:
				style += f'\n\tpadding-top: {self.lb_padding_top_normal.value()};'
			if self.lb_padding_bottom_normal.value() > 0:
				style += f'\n\tpadding-bottom: {self.lb_padding_bottom_normal.value()};'

			# margin
			if self.lb_margin_normal.value() > 0:
				style += f'\n\tmargin: {self.lb_margin_normal.value()};'
			if self.lb_margin_left_normal.value() > 0:
				style += f'\n\tmargin-left: {self.lb_margin_left_normal.value()};'
			if self.lb_margin_right_normal.value() > 0:
				style += f'\n\tmargin-right: {self.lb_margin_right_normal.value()};'
			if self.lb_margin_top_normal.value() > 0:
				style += f'\n\tmargin-top: {self.lb_margin_top_normal.value()};'
			if self.lb_margin_bottom_normal.value() > 0:
				style += f'\n\tmargin-bottom: {self.lb_margin_bottom_normal.value()};'

			style += '\n}' # End of QLabel normal pseudo-state

		# QLabel hover pseudo-state
		if self.lb_hover:

			if style: # style is not False
				style += '\n\nQLabel:hover {'
			else:
				style = '\n\nQLabel:hover {'

			# color
			if self.lb_color_hover:
				style += f'\n\tcolor: {self.lb_color_hover};'
			if self.lb_bg_color_hover:
				style += f'\n\tbackground-color: {self.lb_bg_color_hover};'

			# border
			border_type_hover = self.lb_border_type_hover.currentText()
			if border_type_hover != 'none':
				style += f'\n\tborder-style: {border_type_hover};'
			if self.lb_border_color_hover:
				style += f'\n\tborder-color: {self.lb_border_color_hover};'
			if self.lb_border_width_hover.value() > 0:
				style += f'\n\tborder-width: {self.lb_border_width_hover.value()}px;'
			if self.lb_border_radius_hover.value() > 0:
				style += f'\n\tborder-radius: {self.lb_border_radius_hover.value()}px;'

			style += '\n}' # End of QLabel hover pseudo-state

		# QLabel disabled pseudo-state
		if self.lb_disabled:

			# color
			if style: # style is not False
				style += '\n\nQLabel:disabled {'
			else:
				style = '\n\nQLabel:disabled {'

			if self.lb_color_disabled:
				style += f'\n\tcolor: {self.lb_color_disabled};'
			if self.lb_bg_color_disabled:
				style += f'\n\tbackground-color: {self.lb_bg_color_disabled};'

			# border
			border_type_disabled = self.lb_border_type_disabled.currentText()
			if border_type_disabled != 'none':
				style += f'\n\tborder-style: {border_type_disabled};'
			if self.lb_border_color_disabled:
				style += f'\n\tborder-color: {self.lb_border_color_disabled};'
			if self.lb_border_width_disabled.value() > 0:
				style += f'\n\tborder-width: {self.lb_border_width_disabled.value()}px;'
			if self.lb_border_radius_disabled.value() > 0:
				style += f'\n\tborder-radius: {self.lb_border_radius_disabled.value()}px;'

			style += '\n}' # End of QLabel disabled pseudo-state

		# QLabel build and apply the stylesheet
		self.lb_stylesheet.clear()
		if style:
			lines = style.splitlines()
			for line in lines:
				self.lb_stylesheet.appendPlainText(line)
			self.label.setStyleSheet(textwrap.dedent(style))

	def color_dialog(self):
		obj = self.sender().objectName().split('_')[0]
		state = self.sender().objectName().split('_')[-1]
		prop = self.sender().property('qss')
		variable = self.sender().property('var')
		label = self.sender().property('label')
		#print(f'obj {obj}')
		#print(f'state {state}')
		#print(f'prop {prop}')
		#print(f'variable {variable}')
		#print(f'variable {getattr(self, variable)}')
		#print(f'label {label}')
		#return
		if getattr(self, variable):
			initial_color = QColor(getattr(self, variable))
		else:
			initial_color = QColor(0, 0, 0)  # Initial color: Black
		color_dialog = QColorDialog(self)
		color_dialog.setOptions(QColorDialog.ColorDialogOption.DontUseNativeDialog | 
			QColorDialog.ColorDialogOption.ShowAlphaChannel)
		color_dialog.setCurrentColor(initial_color)
		if color_dialog.exec():
			color = color_dialog.currentColor()
			if color.isValid():
				setattr(self, variable, color.name())
				getattr(self, label).setStyleSheet(f'background-color: {color.name()};')
				setattr(self, f'{obj}_{state}', True)
		else:
			setattr(self, variable, False)
			getattr(self, label).setStyleSheet(f'background-color: none;')

	def size(self):
		obj = self.sender().objectName().split('_')[0]
		setattr(self, f'{obj}_normal', True)

	def border(self): # can be set in all states
		text = self.sender().currentText()
		if text != 'none':
			obj = self.sender().objectName().split('_')[0]
			state = self.sender().objectName().split('_')[-1]
			setattr(self, f'{obj}_{state}', True)

	def font_dialog(self):
		obj = self.sender().objectName().split('_')[0]
		options = QFontDialog.FontDialogOption.DontUseNativeDialog

		if getattr(self, f'{obj}_scaleable_fonts').isChecked():
			options |= QFontDialog.FontDialogOption.ScalableFonts
		elif getattr(self, f'{obj}_non_scaleable_fonts').isChecked():
			options |= QFontDialog.FontDialogOption.NonScalableFonts
		elif getattr(self, f'{obj}_monospaced_fonts').isChecked():
			options |= QFontDialog.FontDialogOption.MonospacedFonts
		elif getattr(self, f'{obj}_proportional_fonts').isChecked():
			options |= QFontDialog.FontDialogOption.ProportionalFonts

		if getattr(self, f'{obj}_font_family'):
			current_font = QFont(getattr(self, f'{obj}_font_family'),
				getattr(self, f'{obj}_font_size'),
				getattr(self, f'{obj}_font_weight'),
				getattr(self, f'{obj}_font_italic'))
		else:
			current_font = self.font()

		font, ok = QFontDialog.getFont(current_font, self, "Choose a Font", options)
		if ok:
			fontinfo = QFontInfo(font)
			setattr(self, f'{obj}_font_family', fontinfo.family())
			setattr(self, f'{obj}_font_size', font.pointSize())
			setattr(self, f'{obj}_font_style', fontinfo.styleName())
			setattr(self, f'{obj}_font_weight', fontinfo.weight())
			setattr(self, f'{obj}_font_italic', fontinfo.italic())
			setattr(self, f'{obj}_normal', True)
		else:
			setattr(self, f'{obj}_font_family', False)
			setattr(self, f'{obj}_font_size', False)
			setattr(self, f'{obj}_font_weight', False)
			setattr(self, f'{obj}_font_weight', False)
			setattr(self, f'{obj}_font_italic', False)

	def padding(self):
		obj = self.sender().objectName().split('_')[0]
		sender_name = self.sender().objectName().split('_')
		if self.sender().value() > 0:
			setattr(self, f'{obj}_normal', True)
			side = False
			sides = ['left', 'right', 'top', 'bottom']
			for item in sides:
				if item in sender_name: # set all to 0
					side = True

			if side:
				with QSignalBlocker(getattr(self, f'{obj}_padding_normal')):
					getattr(self, f'{obj}_padding_normal').setValue(0)
			else:
				with QSignalBlocker(getattr(self, f'{obj}_padding_left_normal')):
					getattr(self, f'{obj}_padding_left_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_padding_right_normal')):
					getattr(self, f'{obj}_padding_right_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_padding_top_normal')):
					getattr(self, f'{obj}_padding_top_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_padding_bottom_normal')):
					getattr(self, f'{obj}_padding_bottom_normal').setValue(0)

	def margin(self):
		obj = self.sender().objectName().split('_')[0]
		sender_name = self.sender().objectName().split('_')
		if self.sender().value() > 0:
			setattr(self, f'{obj}_normal', True)
			side = False
			sides = ['left', 'right', 'top', 'bottom']
			for item in sides:
				if item in sender_name: # set all to 0
					side = True

			if side:
				with QSignalBlocker(getattr(self, f'{obj}_margin_normal')):
					getattr(self, f'{obj}_margin_normal').setValue(0)
			else:
				with QSignalBlocker(getattr(self, f'{obj}_margin_left_normal')):
					getattr(self, f'{obj}_margin_left_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_margin_right_normal')):
					getattr(self, f'{obj}_margin_right_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_margin_top_normal')):
					getattr(self, f'{obj}_margin_top_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_margin_bottom_normal')):
					getattr(self, f'{obj}_margin_bottom_normal').setValue(0)

	def indicator(self):
		obj = self.sender().objectName().split('_')[0]
		if self.sender().value() > 0:
			setattr(self, f'{obj}_indicator', True)

	def set_checkable(self):
		checked = self.sender().isChecked()
		if checked:
			self.pushButton.setCheckable(True)
		else:
			self.pushButton.setCheckable(False)

	def disable(self, obj):
		if self.sender().isChecked():
			self.sender().setText('Enable')
			getattr(self, obj).setEnabled(False)
		else:
			self.sender().setText('Disable')
			getattr(self, obj).setEnabled(True)

	def save(self):
		file_dialog = QFileDialog()
		options = QFileDialog.Option.DontUseNativeDialog
		file_path, file_type = file_dialog.getSaveFileName(None,
		caption='Save QSS As', directory=os.path.expanduser("~"),
		filter='QSS Files (*.qss)', options=options)
		if file_path:
			with open(file_path, "w") as f: # clear the file
				f.write('/* Stylesheet created by Flexqss*/\n\n')

			if self.pb_stylesheet.toPlainText() != '':
				pb_style = self.pb_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('/* QPushButton Section */\n\n')
					f.write(pb_style)

			if self.cb_stylesheet.toPlainText() != '':
				cb_style = self.cb_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('\n/* QCheckBox Section */\n\n')
					f.write(cb_style)

			if self.rb_stylesheet.toPlainText() != '':
				rb_style = self.rb_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('\n/* QRadioButton Section */\n\n')
					f.write(rb_style)

			if self.lb_stylesheet.toPlainText() != '':
				lb_style = self.lb_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('\n/* QLabel Section */\n\n')
					f.write(lb_style)

app = QApplication(sys.argv)
gui = main()
sys.exit(app.exec())


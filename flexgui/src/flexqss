#!/usr/bin/env python3

import sys, os, textwrap
# disable cache usage must be before any local imports
sys.dont_write_bytecode = True

from PyQt6.QtWidgets import QApplication, QMainWindow, QColorDialog
from PyQt6.QtWidgets import QRadioButton, QFontDialog
from PyQt6.QtGui import QPixmap, QFont, QFontInfo
from PyQt6.QtCore import QSignalBlocker
from PyQt6 import uic

from libflexgui import qss_images

class main(QMainWindow):
	def __init__(self):
		super().__init__()

		# get the path to the executable
		self.path = os.path.dirname(os.path.realpath(sys.argv[0]))

		# set the library path
		if self.path == '/usr/bin':
			self.gui_path = '/usr/lib/libflexgui'
		else:
			self.gui_path = self.path
		uic.loadUi(os.path.join(self.gui_path, 'flexqss.ui'), self)

		self.setGeometry(50, 50, 500, 500)
		self.setWindowTitle('Flex QSS Creator')
		self.pb_text_color.clicked.connect(self.color_dialog)
		self.pb_bg_color.clicked.connect(self.color_dialog)
		self.pb_border_color.clicked.connect(self.color_dialog)
		self.pb_text_color_pressed.clicked.connect(self.color_dialog)
		self.pb_bg_color_pressed.clicked.connect(self.color_dialog)
		self.pb_text_color_hover.clicked.connect(self.color_dialog)
		self.pb_bg_color_hover.clicked.connect(self.color_dialog)
		self.pb_text_color_disabled.clicked.connect(self.color_dialog)
		self.pb_bg_color_disabled.clicked.connect(self.color_dialog)
		self.pb_padding.valueChanged.connect(self.padding)
		self.pb_padding_left.valueChanged.connect(self.padding)
		self.pb_padding_right.valueChanged.connect(self.padding)
		self.pb_padding_top.valueChanged.connect(self.padding)
		self.pb_padding_bottom.valueChanged.connect(self.padding)

		self.pb_margin.valueChanged.connect(self.margin)
		self.pb_margin_left.valueChanged.connect(self.margin)
		self.pb_margin_right.valueChanged.connect(self.margin)
		self.pb_margin_top.valueChanged.connect(self.margin)
		self.pb_margin_bottom.valueChanged.connect(self.margin)

		self.pb_disable.clicked.connect(self.disable)
		self.pb_font_picker.clicked.connect(self.font_dialog)

		self.apply_button_style.clicked.connect(self.apply_style)

		self.boxmodel_lb.setPixmap(QPixmap(':/stylesheet-boxmodel.png'))

		self.setup()
		self.show()

	def setup(self):
		self.font_family = False
		self.font_size = False
		self.font_weight = False
		self.font_style = False
		border_types = ['none', 'solid', 'dashed', 'dotted', 'double', 'groove',
			'ridge', 'inset', 'outset']
		self.border_style.addItems(border_types)
		self.pb_color = False
		self.pb_bg_color = False
		self.pb_border_color = False
		self.pb_color_pressed = False
		self.pb_bg_color_pressed = False
		self.pb_color_hover = False
		self.pb_bg_color_hover = False
		self.pb_color_disabled = False
		self.pb_bg_color_disabled = False


	def apply_style(self):
		border_type = self.border_style.currentText()

		style = 'QPushButton {'

		if self.font_family:
			style += f'\n\tfont-family: {self.font_family};'
		if self.font_size:
			style += f'\n\tfont-size: {self.font_size}pt;'
		if self.font_weight:
			style += f'\n\tfont-weight: {self.font_weight};'

		if self.pb_color:
			style += f'\n\tcolor: {self.pb_color};'
		if self.pb_bg_color:
			style += f'\n\tbackground-color: {self.pb_bg_color};'
		if border_type != 'none':
			style += f'\n\tborder-style: {border_type};'

		if self.pb_border_color:
			style += f'\n\tborder-color: {self.pb_border_color};'
		if self.pb_border_width.value() > 0:
			style += f'\n\tborder-width: {self.pb_border_width.value()}px;'
		if self.pb_border_radius.value() > 0:
			style += f'\n\tborder-radius: {self.pb_border_radius.value()}px;'
		if self.pb_min_width.value() > 0:
			style += f'\n\tmin-width: {self.pb_min_width.value()};'
		if self.pb_min_height.value() > 0:
			style += f'\n\tmin-height: {self.pb_min_height.value()};'
		if self.pb_max_width.value() > 0:
			style += f'\n\tmax-width: {self.pb_max_width.value()};'
		if self.pb_max_height.value() > 0:
			style += f'\n\tmax-height: {self.pb_max_height.value()};'

		if self.pb_padding.value() > 0:
			style += f'\n\tpadding: {self.pb_padding.value()};'
		if self.pb_padding_left.value() > 0:
			style += f'\n\tpadding-left: {self.pb_padding_left.value()};'
		if self.pb_padding_right.value() > 0:
			style += f'\n\tpadding-right: {self.pb_padding_right.value()};'
		if self.pb_padding_top.value() > 0:
			style += f'\n\tpadding-top: {self.pb_padding_top.value()};'
		if self.pb_padding_bottom.value() > 0:
			style += f'\n\tpadding-bottom: {self.pb_padding_bottom.value()};'

		if self.pb_margin.value() > 0:
			style += f'\n\tmargin: {self.pb_margin.value()};'
		if self.pb_margin_left.value() > 0:
			style += f'\n\tmargin-left: {self.pb_margin_left.value()};'
		if self.pb_margin_right.value() > 0:
			style += f'\n\tmargin-right: {self.pb_margin_right.value()};'
		if self.pb_margin_top.value() > 0:
			style += f'\n\tmargin-top: {self.pb_margin_top.value()};'
		if self.pb_margin_bottom.value() > 0:
			style += f'\n\tmargin-bottom: {self.pb_margin_bottom.value()};'

		style += '\n}'

		# hover
		if self.pb_color_hover or self.pb_bg_color_hover:
			style += '\n\nQPushButton:hover {'
		if self.pb_color_hover:
			style += f'\n\tcolor: {self.pb_color_hover};'
		if self.pb_bg_color_hover:
			style += f'\n\tbackground-color: {self.pb_bg_color_hover};'
		if self.pb_color_hover or self.pb_bg_color_hover:
			style += '\n}'

		# pressed
		if self.pb_color_pressed or self.pb_bg_color_pressed:
			style += '\n\nQPushButton:pressed {'
		if self.pb_color_pressed:
			style += f'\n\tcolor: {self.pb_color_pressed};'
		if self.pb_bg_color_pressed:
			style += f'\n\tbackground-color: {self.pb_bg_color_pressed};'
		if self.pb_color_pressed or self.pb_bg_color_pressed:
			style += '\n}'

		# disabled
		if self.pb_color_disabled or self.pb_bg_color_disabled:
			style += '\n\nQPushButton:disabled {'
		if self.pb_color_disabled:
			style += f'\n\tcolor: {self.pb_color_disabled};'
		if self.pb_bg_color_disabled:
			style += f'\n\tbackground-color: {self.pb_bg_color_disabled};'
		if self.pb_color_disabled or self.pb_bg_color_disabled:
			style += '\n}'

		self.pb_stylesheet.clear()
		lines = style.splitlines()
		for line in lines:
			self.pb_stylesheet.appendPlainText(line)

		self.pushButton.setStyleSheet(textwrap.dedent(style))


	def set_button_border_width(self, width):
		if width > 0:
			self.pushButton.setStyleSheet (f'border-width: {width}px; border-style: solid;')

	def color_dialog(self):
		prop = self.sender().property('qss')
		variable = self.sender().property('var')
		label = self.sender().property('label')
		color_dialog = QColorDialog()
		color_dialog.setOptions(QColorDialog.ColorDialogOption.DontUseNativeDialog | 
			QColorDialog.ColorDialogOption.ShowAlphaChannel)
		if color_dialog.exec():
			color = color_dialog.currentColor()
			if color.isValid():
				setattr(self, variable, color.name())
				getattr(self, label).setStyleSheet(f'background-color: {color.name()};')
		else:
			setattr(self, variable, False)
			getattr(self, label).setStyleSheet(f'background-color: none;')

	def font_dialog(self):
		options = QFontDialog.FontDialogOption.DontUseNativeDialog
		if self.pb_scaleable_fonts.isChecked():
			options |= QFontDialog.FontDialogOption.ScalableFonts
		elif self.pb_non_scaleable_fonts.isChecked():
			options |= QFontDialog.FontDialogOption.NonScalableFonts
		elif self.pb_monospaced_fonts.isChecked():
			options |= QFontDialog.FontDialogOption.MonospacedFonts
		elif self.pb_proportional_fonts.isChecked():
			options |= QFontDialog.FontDialogOption.ProportionalFonts
		current_font = QFont(self.font_family) if self.font_family else self.font()
		font, ok = QFontDialog.getFont(current_font, self, "Choose a Font", options)
		if ok:
			fontinfo = QFontInfo(font)
			self.font_family = fontinfo.family()
			self.font_size = font.pointSize()
			self.font_style = fontinfo.styleName()
			self.font_weight = fontinfo.weight()
		else:
			self.font_family = False
			self.font_size = False
			self.font_weight = False
			self.font_weight = False

	def padding(self):
		if self.sender().objectName() == 'pb_padding': # set the rest to 0
			with QSignalBlocker(self.pb_padding_left):
				self.pb_padding_left.setValue(0)
			with QSignalBlocker(self.pb_padding_right):
				self.pb_padding_right.setValue(0)
			with QSignalBlocker(self.pb_padding_top):
				self.pb_padding_top.setValue(0)
			with QSignalBlocker(self.pb_padding_bottom):
				self.pb_padding_bottom.setValue(0)
		else: # set pb_padding to 0
			with QSignalBlocker(self.pb_padding):
				self.pb_padding.setValue(0)

	def margin(self):
		if self.sender().objectName() == 'pb_margin': # set the rest to 0
			with QSignalBlocker(self.pb_margin_left):
				self.pb_margin_left.setValue(0)
			with QSignalBlocker(self.pb_margin_right):
				self.pb_margin_right.setValue(0)
			with QSignalBlocker(self.pb_margin_top):
				self.pb_margin_top.setValue(0)
			with QSignalBlocker(self.pb_margin_bottom):
				self.pb_margin_bottom.setValue(0)
		else: # set pb_margin to 0
			with QSignalBlocker(self.pb_margin):
				self.pb_margin.setValue(0)

	def disable(self):
		if self.sender().isChecked():
			self.sender().setText('Enable')
			self.pushButton.setEnabled(False)
		else:
			self.sender().setText('Disable')
			self.pushButton.setEnabled(True)

app = QApplication(sys.argv)
gui = main()
sys.exit(app.exec())


#!/usr/bin/env python3

import sys, os, textwrap
# disable cache usage must be before any local imports
sys.dont_write_bytecode = True

from functools import partial

from PyQt6.QtWidgets import QApplication, QMainWindow, QColorDialog
from PyQt6.QtWidgets import QRadioButton, QFontDialog, QFileDialog
from PyQt6.QtGui import QPixmap, QFont, QFontInfo, QColor
from PyQt6.QtCore import QSignalBlocker
from PyQt6 import uic

from libflexgui import qss_images
from libflexgui import qss_pushbutton
from libflexgui import qss_checkbox
from libflexgui import qss_radiobutton
from libflexgui import qss_toolbar
from libflexgui import qss_toolbutton
from libflexgui import qss_spinbox
from libflexgui import qss_label

class main(QMainWindow):
	def __init__(self):
		super().__init__()

		# get the path to the executable
		self.path = os.path.dirname(os.path.realpath(sys.argv[0]))

		# set the library path
		if self.path == '/usr/bin':
			self.gui_path = '/usr/lib/libflexgui'
		else:
			self.gui_path = self.path
		uic.loadUi(os.path.join(self.gui_path, 'flexqss.ui'), self)

		self.setGeometry(0, 0, 500, 500)
		self.setWindowTitle('Flex QSS Creator')
		qss_pushbutton.startup(self)
		qss_checkbox.startup(self)
		qss_radiobutton.startup(self)
		qss_toolbar.startup(self)
		qss_toolbutton.startup(self)
		qss_spinbox.startup(self)
		qss_label.startup(self)
		self.setup()
		self.show()

	def setup(self):

		for i in range(7):
			getattr(self, f'boxmodel_lb_{i}').setPixmap(QPixmap(':/boxmodel.png'))
		#self.boxmodel_lb.setPixmap(QPixmap(':/boxmodel.png'))

		# Menu Items
		self.actionSave_As.triggered.connect(self.save)

		border_types = ['none', 'solid', 'dashed', 'dotted', 'double', 'groove',
			'ridge', 'inset', 'outset']
		abstract_button_states = ['normal', 'hover', 'pressed', 'checked', 'disabled']


	def color_dialog(self):
		obj = self.sender().objectName().split('_')[0]
		state = self.sender().objectName().split('_')[-1]
		prop = self.sender().property('qss')
		variable = self.sender().property('var')
		label = self.sender().property('label')
		#print(f'obj {obj}')
		#print(f'state {state}')
		#print(f'prop {prop}')
		#print(f'variable {variable}')
		#print(f'variable {getattr(self, variable)}')
		#print(f'label {label}')
		#return
		if getattr(self, variable):
			initial_color = QColor(getattr(self, variable))
		else:
			initial_color = QColor(0, 0, 0)  # Initial color: Black
		color_dialog = QColorDialog(self)
		color_dialog.setOptions(QColorDialog.ColorDialogOption.DontUseNativeDialog | 
			QColorDialog.ColorDialogOption.ShowAlphaChannel)
		color_dialog.setCurrentColor(initial_color)
		if color_dialog.exec():
			color = color_dialog.currentColor()
			if color.isValid():
				setattr(self, variable, color.name())
				getattr(self, label).setStyleSheet(f'background-color: {color.name()};')
				setattr(self, f'{obj}_{state}', True)
				#print(getattr(self, f'{obj}_{state}'))
		else:
			setattr(self, variable, False)
			getattr(self, label).setStyleSheet(f'background-color: none;')

	def size(self):
		obj = self.sender().objectName().split('_')[0]
		setattr(self, f'{obj}_normal', True)

	def border(self): # can be set in all states
		text = self.sender().currentText()
		if text != 'none':
			obj = self.sender().objectName().split('_')[0]
			state = self.sender().objectName().split('_')[-1]
			setattr(self, f'{obj}_{state}', True)

	def font_dialog(self):
		obj = self.sender().objectName().split('_')[0]
		options = QFontDialog.FontDialogOption.DontUseNativeDialog

		if getattr(self, f'{obj}_scaleable_fonts').isChecked():
			options |= QFontDialog.FontDialogOption.ScalableFonts
		elif getattr(self, f'{obj}_non_scaleable_fonts').isChecked():
			options |= QFontDialog.FontDialogOption.NonScalableFonts
		elif getattr(self, f'{obj}_monospaced_fonts').isChecked():
			options |= QFontDialog.FontDialogOption.MonospacedFonts
		elif getattr(self, f'{obj}_proportional_fonts').isChecked():
			options |= QFontDialog.FontDialogOption.ProportionalFonts

		if getattr(self, f'{obj}_font_family'):
			current_font = QFont(getattr(self, f'{obj}_font_family'),
				getattr(self, f'{obj}_font_size'),
				getattr(self, f'{obj}_font_weight'),
				getattr(self, f'{obj}_font_italic'))
		else:
			current_font = self.font()

		font, ok = QFontDialog.getFont(current_font, self, "Choose a Font", options)
		if ok:
			fontinfo = QFontInfo(font)
			setattr(self, f'{obj}_font_family', fontinfo.family())
			setattr(self, f'{obj}_font_size', font.pointSize())
			setattr(self, f'{obj}_font_style', fontinfo.styleName())
			setattr(self, f'{obj}_font_weight', fontinfo.weight())
			setattr(self, f'{obj}_font_italic', fontinfo.italic())
			setattr(self, f'{obj}_normal', True)
		else:
			setattr(self, f'{obj}_font_family', False)
			setattr(self, f'{obj}_font_size', False)
			setattr(self, f'{obj}_font_weight', False)
			setattr(self, f'{obj}_font_weight', False)
			setattr(self, f'{obj}_font_italic', False)

	def padding(self):
		obj = self.sender().objectName().split('_')[0]
		sender_name = self.sender().objectName().split('_')
		if self.sender().value() > 0:
			setattr(self, f'{obj}_normal', True)
			side = False
			sides = ['left', 'right', 'top', 'bottom']
			for item in sides:
				if item in sender_name: # set all to 0
					side = True

			if side:
				with QSignalBlocker(getattr(self, f'{obj}_padding_normal')):
					getattr(self, f'{obj}_padding_normal').setValue(0)
			else:
				with QSignalBlocker(getattr(self, f'{obj}_padding_left_normal')):
					getattr(self, f'{obj}_padding_left_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_padding_right_normal')):
					getattr(self, f'{obj}_padding_right_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_padding_top_normal')):
					getattr(self, f'{obj}_padding_top_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_padding_bottom_normal')):
					getattr(self, f'{obj}_padding_bottom_normal').setValue(0)

	def margin(self):
		obj = self.sender().objectName().split('_')[0]
		sender_name = self.sender().objectName().split('_')
		if self.sender().value() > 0:
			setattr(self, f'{obj}_normal', True)
			side = False
			sides = ['left', 'right', 'top', 'bottom']
			for item in sides:
				if item in sender_name: # set all to 0
					side = True

			if side:
				with QSignalBlocker(getattr(self, f'{obj}_margin_normal')):
					getattr(self, f'{obj}_margin_normal').setValue(0)
			else:
				with QSignalBlocker(getattr(self, f'{obj}_margin_left_normal')):
					getattr(self, f'{obj}_margin_left_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_margin_right_normal')):
					getattr(self, f'{obj}_margin_right_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_margin_top_normal')):
					getattr(self, f'{obj}_margin_top_normal').setValue(0)
				with QSignalBlocker(getattr(self, f'{obj}_margin_bottom_normal')):
					getattr(self, f'{obj}_margin_bottom_normal').setValue(0)

	def indicator(self):
		obj = self.sender().objectName().split('_')[0]
		if self.sender().value() > 0:
			setattr(self, f'{obj}_indicator', True)

	def set_checkable(self):
		checked = self.sender().isChecked()
		if checked:
			self.pushButton.setCheckable(True)
		else:
			self.pushButton.setCheckable(False)

	def disable(self, obj):
		if self.sender().isChecked():
			self.sender().setText('Enable')
			getattr(self, obj).setEnabled(False)
		else:
			self.sender().setText('Disable')
			getattr(self, obj).setEnabled(True)

	def save(self):
		file_dialog = QFileDialog()
		options = QFileDialog.Option.DontUseNativeDialog
		file_path, file_type = file_dialog.getSaveFileName(None,
		caption='Save QSS As', directory=os.path.expanduser("~"),
		filter='QSS Files (*.qss)', options=options)
		if file_path:
			with open(file_path, "w") as f: # clear the file
				f.write('/* Stylesheet created by Flexqss*/\n\n')

			if self.pb_stylesheet.toPlainText() != '':
				pb_style = self.pb_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('/* QPushButton Section */\n\n')
					f.write(pb_style)

			if self.cb_stylesheet.toPlainText() != '':
				cb_style = self.cb_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('\n/* QCheckBox Section */\n\n')
					f.write(cb_style)

			if self.rb_stylesheet.toPlainText() != '':
				rb_style = self.rb_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('\n/* QRadioButton Section */\n\n')
					f.write(rb_style)

			if self.tbar_stylesheet.toPlainText() != '':
				rb_style = self.tbar_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('\n/* QToolBar Section */\n\n')
					f.write(rb_style)

			if self.tb_stylesheet.toPlainText() != '':
				rb_style = self.tb_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('\n/* QToolButton Section */\n\n')
					f.write(rb_style)

			if self.sb_stylesheet.toPlainText() != '':
				lb_style = self.sb_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('\n/* QSpinBox Section */\n\n')
					f.write(lb_style)

			if self.lb_stylesheet.toPlainText() != '':
				lb_style = self.lb_stylesheet.toPlainText()
				with open(file_path, "a") as f:
					f.write('\n/* QLabel Section */\n\n')
					f.write(lb_style)


app = QApplication(sys.argv)
gui = main()
sys.exit(app.exec())

